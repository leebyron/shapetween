import processing.core.*; import java.applet.*; import java.awt.*; import java.awt.image.*; import java.awt.event.*; import java.io.*; import java.net.*; import java.text.*; import java.util.*; import java.util.zip.*; public class _pattern_Master extends PApplet {//import processing.opengl.*;
//import processing.pdf.*;
// boolean dosave=false;


// PATTERN MASTER
// Golan Levin, golan@flong.com
// Spring 2006



boolean bDrawProbe = true;

//-----------------------------------------------------
float xscale = 300;
float yscale = 300;
float bandTh  = 60;
float margin0 = 10;
float margin1 = 5;
float margin2 = 90;
float xoffset = margin0 + bandTh + margin1;
float yoffset = margin0 + bandTh + margin1;

float param_a = 0.25f;
float param_b = 0.75f;
float param_c = 0.75f;
float param_d = 0.25f;
int   param_n = 2;

float probe_x = 0.5f;
float probe_y = 0.5f;

boolean useParameterA = true;
boolean useParameterB = true;
boolean useParameterC = true;
boolean useParameterD = true;
boolean useParameterN = true;

boolean visited = false;
boolean bClickedInGraph = false;
String functionName = "";

int FUNCTIONMODE = 0;
int NFUNCTIONS = 26;
public void keyPressed(){
  if(key == CODED) { 
    if ((keyCode == UP) || (keyCode == RIGHT)) { 
      FUNCTIONMODE = (FUNCTIONMODE+1)%NFUNCTIONS; 
    } 
    else if ((keyCode == DOWN) || (keyCode == LEFT)) { 
      FUNCTIONMODE = (FUNCTIONMODE-1+NFUNCTIONS)%NFUNCTIONS; 
    } 
  } 
  // if(key=='s') dosave=true;



}

//-----------------------------------------------------
public void setup(){
  int scrW = (int)(margin0 + bandTh + margin1 + xscale + margin0);
  int scrH = (int)(margin0 + bandTh + margin1 + yscale + margin2 + margin0);
  size (scrW, scrH);// OPENGL);
  println(scrW + " " + scrH);
  PFont font = loadFont("QuickTypeIIMono-24.vlw");
  textFont(font, 12);


}

//-----------------------
public void mouseMoved(){
  visited = true; 
}
public void mousePressed(){
  bClickedInGraph = false;
  if ((mouseX >= xoffset) && (mouseX <= (xoffset + xscale)) && 
    (mouseY >= yoffset) && (mouseY <= (yoffset + yscale))){
    bClickedInGraph = true;
  }
}

/*
//====================================================
 void drawPDF(){
 
 
 String pdfFilename = functionName;
 if (useParameterA){ 
 pdfFilename += "_a=" + nf(param_a, 1, 2);
 }
 if (useParameterB){ 
 pdfFilename += "_b=" + nf(param_b, 1, 2);
 }
 if (useParameterC){ 
 pdfFilename += "_c=" + nf(param_c, 1, 2);
 }
 if (useParameterD){ 
 pdfFilename += "_d=" + nf(param_d, 1, 2);
 }
 if (useParameterN){ 
 pdfFilename += "_n=" + nf(param_n, 1, 2);
 }
 pdfFilename += ".pdf";
 
 
 
 PGraphicsPDF pdf=(PGraphicsPDF)beginRaw(PDF, pdfFilename); 
 pdf.strokeJoin(MITER);
 pdf.strokeCap(ROUND);
 pdf.strokeWeight(0);
 pdf.noFill();
 pdf.stroke(0);
 pdf.rect(0,0, width,height);
 
 background (255,255,255);
 stroke(128);
 fill(255);
 rect(xoffset, yoffset, xscale, yscale);
 drawModeSpecificGraphics();
 
 // draw the function's curve
 float x = 0;
 float y = 1 - function (x, param_a, param_b, param_c, param_d, param_n);
 float qx = xoffset + xscale * x;
 float qy = yoffset + yscale * y;
 float px = qx;
 float  py = qy;
 stroke(0);
 beginShape(LINE_STRIP);
 vertex(px,py);
 for (float i=0; i<=xscale; i+=0.1){
 x = (float)i/xscale;
 y = 1 - function (x, param_a, param_b, param_c, param_d, param_n);
 px = xoffset + (xscale * x);
 py = yoffset + (yscale * y);
 //line (qx, qy, px, py);
 vertex(px,py);
 qx = px;
 qy = py;
 }
 endShape();
 
 
 //---------------------------
 // draw the function's gray levels
 py = yoffset-(bandTh+margin1);
 qy = yoffset-margin1;
 beginShape(QUAD_STRIP);
 for (float j=0; j<=xscale; j++){
 float j1 = j; 
 float x1 = j1/(float)xscale;
 float y1 = function (1-x1, param_a, param_b, param_c, param_d, param_n);
 float g1 = 255.0 * y1;
 float px1 = xoffset + xscale - j1;
 
 noStroke();
 fill(g1,g1,g1);
 vertex(px1,py); 
 vertex(px1,qy); 
 }
 endShape();
 noFill();
 stroke(128);
 rect(xoffset, yoffset-(bandTh+margin1), xscale, bandTh);
 
 
 endRaw();
 dosave=false;
 }
 */


//-----------------------
public void draw(){

  probe_x =  (abs(millis()%2000-1000))/1000.0f;
  if (mousePressed && bClickedInGraph){
    if (visited){
      param_a =   (float)(mouseX - xoffset)/xscale;
      param_b = 1-(float)(mouseY - yoffset)/yscale;
      param_a = constrain(param_a, 0,1); 
      param_b = constrain(param_b, 0,1); 
    }
  } 
  param_n = 2;

  /*
  if (dosave){
   drawPDF();
   }  else{
   */

  background (255);//216,216,216);
  fill(255,255,255);
  stroke(0);

  rect(xoffset, yoffset, xscale, yscale);
  rect(margin0, yoffset, bandTh, yscale);

  drawLabels();

  float x,y;
  float px,py;
  float qx,qy;

  //---------------------------
  // draw the probe
  if (bDrawProbe){
    x = constrain(probe_x, 0,1);
    y = probe_y = 1 - function (x, param_a, param_b, param_c, param_d, param_n);
    px = xoffset + round(xscale * x);
    py = yoffset + round(yscale * y);
    qy = yoffset + yscale;
    stroke(255,128,128);
    line (px, qy, px, py);
    stroke(128,128,255);
    line (px, py, xoffset, py);
    fill(0);
    noStroke();
    ellipseMode(CENTER);
    ellipse(30, py, 11,11);
  }

  //---------------------------
  // extra mode-specific graphics for Bezier
  drawModeSpecificGraphics();

  //---------------------------
  // draw the function's curve
  x = 0;
  y = 1 - function (x, param_a, param_b, param_c, param_d, param_n);
  qx = xoffset + xscale * x;
  qy = yoffset + yscale * y;
  px = qx;
  py = qy;
  stroke(0);
  for (int i=0; i<=xscale; i++){
    x = (float)i/xscale;
    y = 1 - function (x, param_a, param_b, param_c, param_d, param_n);
    px = xoffset + round(xscale * x);
    py = yoffset + round(yscale * y);
    line (qx, qy, px, py);
    qx = px;
    qy = py;
  }

  //---------------------------
  // draw the function's gray levels
  float g = 0;
  for (int j=0; j<=xscale; j++){
    x = (float)j/xscale;
    y = function (1-x, param_a, param_b, param_c, param_d, param_n);
    g = 255.0f * y;
    stroke(g,g,g);
    py = yoffset-(bandTh+margin1);
    qy = yoffset-margin1;
    px = xoffset + xscale - j;
    line (px, py, px, qy);
  }
  noFill();
  stroke(128);
  rect(xoffset, yoffset-(bandTh+margin1), xscale, bandTh);


  /* } */


}


//-----------------------
public void drawLabels(){
  float grayEnable = 64;
  float grayDisable = 192;

  fill(grayEnable);
  text(functionName,                xoffset, yoffset+yscale+15);
  if (useParameterA){
    fill (grayEnable); 
    text("a: " + nf(param_a, 1, 3), xoffset, yoffset+yscale+28);
  } 
  else {
    fill (grayDisable);
    text("a: -----", xoffset, yoffset+yscale+28);
  }
  if (useParameterB){
    fill (grayEnable);
    text("b: " + nf(param_b, 1, 3), xoffset, yoffset+yscale+41);
  } 
  else {
    fill (grayDisable);
    text("b: -----", xoffset, yoffset+yscale+41);
  }

  if (useParameterC){
    fill (grayEnable);
    text("c: " + nf(param_c, 1, 3), xoffset, yoffset+yscale+54);
  } 
  else {
    fill (grayDisable);
    text("c: -----", xoffset, yoffset+yscale+54);
  }

  if (useParameterD){
    fill (grayEnable);
    text("d: " + nf(param_d, 1, 3), xoffset, yoffset+yscale+67);
  } 
  else {
    fill (grayDisable);
    text("d: -----", xoffset, yoffset+yscale+67);
  }

  if (useParameterN){
    fill (grayEnable);
    text("n: " + param_n, xoffset, yoffset+yscale+80);
  } 
  else {
    fill (grayDisable);
    text("n: -----", xoffset, yoffset+yscale+80);
  }


}

//===============================================================
public void drawModeSpecificGraphics(){
  float x,y;
  float xa,yb;
  float xc,yd;
  float K = 12;

  noFill();
  stroke(180,180,255);

  switch (FUNCTIONMODE){

  case 21: //function_QuadraticBezier
    x = xoffset + param_a * xscale;
    y = yoffset + (1-param_b) * yscale;
    line (xoffset, yoffset + yscale, x,y);
    line (xoffset + xscale, yoffset, x,y);
    break;

  case 22: // cubic bezier
    xa = xoffset + param_a * xscale;
    yb = yoffset + (1-param_b) * yscale;
    xc = xoffset + param_c * xscale;
    yd = yoffset + (1-param_d) * yscale;
    line (xoffset, yoffset + yscale, xa,yb);
    line (xc,yd, xa,yb);
    line (xoffset + xscale, yoffset, xc,yd);
    break;

  case 2:
  case 3:
  case 5:
  case 8:
  case 20: 
  case 18:  // through a point
    x = xoffset + param_a * xscale;
    y = yoffset + (1-param_b) * yscale;
    line(x-K, y, x+K, y); 
    line(x, y-K, x, y+K); 
    break;

  case 19:
    xa = xoffset + param_a * xscale;
    yb = yoffset + (1-param_b) * yscale;
    xc = xoffset + param_c * xscale;
    yd = yoffset + (1-param_d) * yscale;
    line(xa-K, yb, xa+K, yb); 
    line(xa, yb-K, xa, yb+K); 
    line(xc-K, yd, xc+K, yd); 
    line(xc, yd-K, xc, yd+K); 
    break;

  case 17: // circular fillet
    x = xoffset + arcCenterX * xscale;
    y = yoffset + (1-arcCenterY) * yscale;
    float d = 2.0f * arcRadius * xscale;
    ellipseMode(CENTER);
    ellipse(x,y, d,d);

    x = xoffset + param_a * xscale;
    y = yoffset + (1-param_b) * yscale;
    line(x-K, y, x+K, y); 
    line(x, y-K, x, y+K); 
    break;

  }
}


//===============================================================
public float function (float x, float a, float b, float c, float d, int n){
  float out = 0;
  switch (FUNCTIONMODE){


  case 0:  
    out = function_DoubleLinear (x,a,b);  
    break;
  case 1:
    out = function_DoubleCircleSeat (x,a); 
    break;
  case 2:
    out = function_DoubleEllipticSeat (x,a,b,n); 
    break;
  case 3:
    out = function_DoubleCubicSeat (x,a,b);
    break;
  case 4: 
    out = function_DoubleCubicSeatSimplified (x,a,b);
    break;
  case 5: 
    out = function_DoubleOddPolynomialSeat (x,a,b,n);   
    break;
  case 6:
    out = function_DoubleExponentialSeat (x,a);
    break;
  case 7:
    out = function_DoubleCircleSigmoid (x,a);
    break;
  case 8: 
    out = function_DoubleEllipticSigmoid (x,a,b);
    break;
  case 9: 
    out = function_RaisedInvertedCosine (x);
    break;
  case 10: 
    out = function_BlinnWyvillCosineApproximation (x);
    break;
  case 11:
    out = function_DoubleQuadraticSigmoid (x);
    break;
  case 12:
    out = function_DoublePolynomialSigmoid  (x,a,b,n);
    break;
  case 13:
    out = function_DoubleExponentialSigmoid (x,a);
    break;
  case 14:
    out = function_ExponentialEmphasis (x,a);
    break;
  case 15:
    out = function_NiftyQuartic (x,a,b); 
    break;

  case 16:
    out = function_NormalizedLogisticSigmoid (x,a); 
    break;
  case 17:
    out = function_CircularFillet (x,a,b,d);
    break;
  case 18:
    out = function_CircularArcThroughAPoint (x,a,b);  
    break;

  case 19:
    out = function_CubicBezierThrough2Points (x,a,b,c,d);
    break;
  case 20:
    out = function_ParabolaThroughAPoint (x,a,b);
    break;
  case 21:
    out = function_QuadraticBezier (x,a,b);
    break;
  case 22:
    out = function_CubicBezier (x,a,b,c,d);
    break;
  case 23: 
    out = function_Identity(x);
    break;
  case 24: 
    out =  function_CircularEaseIn(x);
    break;
  case 25:
    out =  function_CircularEaseOut(x);
    break;
  }
  return out;
}




// Double-(Odd) Polynomial Seat
//------------------------------------------------------------------
public float function_DoubleOddPolynomialSeat (float x, float a, float b, int n){
  functionName = "Double-Odd-Polynomial Seat";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = false;
  useParameterN = true;

  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f;
  float max_param_b = 1.0f;

  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 
  int p = 2*n + 1;
  float y = 0;
  if (x <= a){
    y = b - b*pow(1-x/a, p);
  } 
  else {
    y = b + (1-b)*pow((x-a)/(1-a), p);
  }
  return y;
}













// Double-Linear Interpolator

//------------------------------------------------------------------
public float function_DoubleLinear (float x, float a, float b){
  functionName = "Double-Linear";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f;
  float max_param_b = 1.0f;
  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 
  
  float y = 0;
  if (x<=a){
    y = (b/a) * x;
  } 
  else {
    y = b + ((1-b)/(1-a))*(x-a);
  }
  return y;
}




// Symmetric Double-Element Sigmoids

//------------------------------------------------------------------
public float function_DoubleExponentialSigmoid (float x, float a){
  functionName = "Double-Exponential Sigmoid";
  useParameterA = true;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  a = constrain(a, min_param_a, max_param_a); 
  a = 1-a;
  
  float y = 0;
  if (x<=0.5f){
    y = (pow(2.0f*x, 1.0f/a))/2.0f;
  } 
  else {
    y = 1.0f - (pow(2.0f*(1.0f-x), 1.0f/a))/2.0f;
  }
  return y;
}

//------------------------------------------------------------------
public float function_DoubleQuadraticSigmoid (float x){
  functionName = "Double-Quadratic Sigmoid";
  useParameterA = false;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float y = 0;
  if (x<=0.5f){
    y = sq(2.0f*x)/2.0f;
  } 
  else {
    y = 1.0f - sq(2*(x-1))/2.0f;
  }
  return y;
}


//------------------------------------------------------------------
public float function_DoublePolynomialSigmoid (float x, float a, float b, int n){
  functionName = "Double-Polynomial Sigmoid";
  useParameterA = false;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = true;
  

  float y = 0;
  if (n%2 == 0){ 
    // even polynomial
    if (x<=0.5f){
      y = pow(2.0f*x, n)/2.0f;
    } 
    else {
      y = 1.0f - pow(2*(x-1), n)/2.0f;
    }
  } 
  
  else { 
    // odd polynomial
    if (x<=0.5f){
      y = pow(2.0f*x, n)/2.0f;
    } 
    else {
      y = 1.0f + pow(2.0f*(x-1), n)/2.0f;
    }

  }

  return y;
}





// Double-Elliptic Seat and Double-Circular Seat

//------------------------------------------------------------------
public float function_DoubleEllipticSeat (float x, float a, float b, int n){
  functionName = "Double-Elliptic Seat";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;
  
  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f;
  float max_param_b = 1.0f;

  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 
  float y = 0;

  // Double-Elliptic Seat
  if (x<=a){
    y = (b/a) * sqrt(sq(a) - sq(x-a));
  } 
  else {
    y = 1- ((1-b)/(1-a))*sqrt(sq(1-a) - sq(x-a));
  }
  return y;
}




// Double-Cubic Seat 

//------------------------------------------------------------------
public float function_DoubleCubicSeat (float x, float a, float b){
  functionName = "Double-Cubic Seat";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;
  
  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f;
  float max_param_b = 1.0f;

  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 
  float y = 0;
  if (x <= a){
    y = b - b*pow(1-x/a, 3);
  } 
  else {
    y = b + (1-b)*pow((x-a)/(1-a), 3);
  }
  return y;
}

// Double-Circle sigmoid

//------------------------------------------------------------------
public float function_DoubleCircleSigmoid (float x, float a){
  functionName = "Double-Circular Sigmoid";
  useParameterA = true;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float min_param_a = 0.0f;
  float max_param_a = 1.0f;

  a = constrain(a, min_param_a, max_param_a); 
  float y = 0;
  if (x<=a){
    y = a - sqrt(a*a - x*x);
  } 
  else {
    y = a + sqrt(sq(1-a) - sq(x-1));
  }
  return y;
}


//------------------------------------------------------------------
public float function_CircularEaseIn (float x){
  functionName = "Circular Ease In";
  useParameterA = false;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;
  
  float y = 1 - sqrt(1 - x*x);
  return y;
}

//------------------------------------------------------------------
public float function_CircularEaseOut (float x){
  functionName = "Circular Ease Out";
  useParameterA = false;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  
  float y = sqrt(1 - sq(1 - x));
  return y;
}

// Double-Elliptic Sigmoid

//------------------------------------------------------------------
public float function_DoubleEllipticSigmoid (float x, float a, float b){
  functionName = "Double-Elliptic Sigmoid";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f;
  float max_param_b = 1.0f;

  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 
  float y = 0;
  if (x<=a){
    y = b * (1 - (sqrt(sq(a) - sq(x))/a));
  } 
  else {
    y = b + ((1-b)/(1-a))*sqrt(sq(1-a) - sq(x-1));
  }
  return y;
}

// Simplified Double-Cubic Seat

//------------------------------------------------------------------
public float function_DoubleCubicSeatSimplified (float x, float a, float b){
  functionName = "Simplified Double-Cubic Seat";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f;
  float max_param_b = 1.0f;

  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 
  b = 1 - b; //massage for intelligibility.
  
  float y = 0;
  if (x<=a){
    y = b*x + (1-b)*a*(1-pow(1-x/a, 3));
  } 
  else {
    y = b*x + (1-b)*(a + (1-a)*pow((x-a)/(1-a), 3));
  }

  return y;
}

// Raised Inverted Cosines

//------------------------------------------------------------------
public float function_RaisedInvertedCosine (float x){
  functionName = "Raised Inverted Cosine";
  useParameterA = false;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float y = (1.0f - cos(PI*x))/2.0f;
  return y;
}

//------------------------------------------------------------------
public float function_BlinnWyvillCosineApproximation (float x){
  functionName = "Blinn/Wyvill's Cosine Approximation";
  useParameterA = false;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float x2 = x*x;
  float x4 = x2*x2;
  float x6 = x4*x2;
  float fa = ( 4.0f/9.0f);
  float fb = (17.0f/9.0f);
  float fc = (22.0f/9.0f);
  float y = fa*x6 - fb*x4 + fc*x2;

  return y;
}

// Exponential shapers

public float function_ExponentialEmphasis (float x, float a){
  functionName = "Exponential Emphasis";
  useParameterA = true;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;
  
  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  a = constrain(a, min_param_a, max_param_a); 
  
  if (a < 0.5f){
    // emphasis
    a = 2*(a);
    float y = pow(x, a);
    return y;
  } else {
    // de-emphasis
    a = 2*(a-0.5f);
    float y = pow(x, 1.0f/(1-a));
    return y;
  }
  
}

// Symmetric Double-Exponential Seat

//------------------------------------------------------------------
public float function_DoubleExponentialSeat (float x, float a){
  functionName = "Double-Exponential Seat";
  useParameterA = true;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  a = constrain(a, min_param_a, max_param_a); 

  float y = 0;
  if (x<=0.5f){
    y = (pow(2.0f*x, 1-a))/2.0f;
  } 
  else {
    y = 1.0f - (pow(2.0f*(1.0f-x), 1-a))/2.0f;
  }
  return y;
}

// Joining Two Lines with a Circular Arc Fillet
// Adapted from Robert D. Miller / Graphics Gems III.

float arcStartAngle;
float arcEndAngle;
float arcStartX,  arcStartY;
float arcEndX,    arcEndY;
float arcCenterX, arcCenterY;
float arcRadius;


// ====================================================================
public float function_CircularFillet (float x, float a, float b, float c){
  
  functionName = "Double-Linear with Circular Fillet";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = true;
  useParameterN = false;
  
  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f + epsilon;
  float max_param_b = 1.0f - epsilon;
  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 
  
  
  float R = c;
  computeFilletParameters (0,0, a,b, a,b, 1,1,  R);
  

  float t = 0;
  float y = 0;
  x = constrain(x,0,1); 
  
  if (x <= arcStartX){
    t = x / arcStartX;
    y = t * arcStartY;
  } 
  else if (x >= arcEndX){
    t = (x - arcEndX)/(1 - arcEndX);
    y = arcEndY + t*(1 - arcEndY);
  } 
  else {
    if (x >= arcCenterX){
      y = arcCenterY - sqrt(sq(arcRadius) - sq(x-arcCenterX)); 
    } else{
      y = arcCenterY + sqrt(sq(arcRadius) - sq(x-arcCenterX)); 
    }
  }
  return y;
}


// ====================================================================
// Return signed distance from line Ax + By + C = 0 to point P.
public float linetopoint (float a, float b, float c, float ptx, float pty){
  float lp = 0.0f;
  float d = sqrt((a*a)+(b*b));
  if (d != 0.0f){
    lp = (a*ptx + b*pty + c)/d;
  }
  return lp;
}

// ====================================================================
// Compute the paramters of a circular arc fillet between lines L1 (p1 to p2) and
// L2 (p3 to p4) with radius R.  
// 
public void computeFilletParameters (
float p1x, float p1y, 
float p2x, float p2y, 
float p3x, float p3y, 
float p4x, float p4y,
float r){

  float c1   = p2x*p1y - p1x*p2y;
  float a1   = p2y-p1y;
  float b1   = p1x-p2x;
  float c2   = p4x*p3y - p3x*p4y;
  float a2   = p4y-p3y;
  float b2   = p3x-p4x;
  if ((a1*b2) == (a2*b1)){  /* Parallel or coincident lines */
    return;
  }

  float d1, d2;
  float mPx, mPy;
  mPx= (p3x + p4x)/2.0f;
  mPy= (p3y + p4y)/2.0f;
  d1 = linetopoint(a1,b1,c1,mPx,mPy);  /* Find distance p1p2 to p3 */
  if (d1 == 0.0f) {
    return; 
  }
  mPx= (p1x + p2x)/2.0f;
  mPy= (p1y + p2y)/2.0f;
  d2 = linetopoint(a2,b2,c2,mPx,mPy);  /* Find distance p3p4 to p2 */
  if (d2 == 0.0f) {
    return; 
  }

  float c1p, c2p, d;
  float rr = r;
  if (d1 <= 0.0f) {
    rr= -rr;
  }
  c1p = c1 - rr*sqrt((a1*a1)+(b1*b1));  /* Line parallel l1 at d */
  rr = r;
  if (d2 <= 0.0f){
    rr = -rr;
  }
  c2p = c2 - rr*sqrt((a2*a2)+(b2*b2));  /* Line parallel l2 at d */
  d = (a1*b2)-(a2*b1);

  float pCx = (c2p*b1-c1p*b2)/d;                /* Intersect constructed lines */
  float pCy = (c1p*a2-c2p*a1)/d;                /* to find center of arc */
  float pAx = 0;
  float pAy = 0;
  float pBx = 0;
  float pBy = 0;
  float dP,cP;

  dP = (a1*a1) + (b1*b1);              /* Clip or extend lines as required */
  if (dP != 0.0f){
    cP = a1*pCy - b1*pCx;
    pAx = (-a1*c1 - b1*cP)/dP;
    pAy = ( a1*cP - b1*c1)/dP;
  }
  dP = (a2*a2) + (b2*b2);
  if (dP != 0.0f){
    cP = a2*pCy - b2*pCx;
    pBx = (-a2*c2 - b2*cP)/dP;
    pBy = ( a2*cP - b2*c2)/dP;
  }

  float gv1x = pAx-pCx; 
  float gv1y = pAy-pCy;
  float gv2x = pBx-pCx; 
  float gv2y = pBy-pCy;

  float arcStart = (float) atan2(gv1y,gv1x); 
  float arcAngle = 0.0f;
  float dd = (float) sqrt(((gv1x*gv1x)+(gv1y*gv1y)) * ((gv2x*gv2x)+(gv2y*gv2y)));
  if (dd != (float) 0.0f){
    arcAngle = (acos((gv1x*gv2x + gv1y*gv2y)/dd));
  } 
  float crossProduct = (gv1x*gv2y - gv2x*gv1y);
  if (crossProduct < 0.0f){ 
    arcStart -= arcAngle;
  }

  float arc1 = arcStart;
  float arc2 = arcStart + arcAngle;
  if (crossProduct < 0.0f){
    arc1 = arcStart + arcAngle;
    arc2 = arcStart;
  }

  arcCenterX    = pCx;
  arcCenterY    = pCy;
  arcStartAngle = arc1;
  arcEndAngle   = arc2;
  arcRadius     = r;
  arcStartX = arcCenterX + arcRadius*cos(arcStartAngle);
  arcStartY = arcCenterY + arcRadius*sin(arcStartAngle);
  arcEndX   = arcCenterX + arcRadius*cos(arcEndAngle);
  arcEndY   = arcCenterY + arcRadius*sin(arcEndAngle);
}

// Adapted from Paul Bourke 

float m_Centerx;
float m_Centery;
float m_dRadius;


//==============================================================
public float function_CircularArcThroughAPoint (float x, float a, float b){
  functionName = "Circular Arc Through a Given Point";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;
  
  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f + epsilon;
  float max_param_b = 1.0f - epsilon;
  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 
  x = constrain(x, 0+epsilon,1-epsilon);
  
  float pt1x = 0;
  float pt1y = 0;
  float pt2x = a;
  float pt2y = b;
  float pt3x = 1;
  float pt3y = 1;

  if      (!IsPerpendicular(pt1x,pt1y, pt2x,pt2y, pt3x,pt3y) )		calcCircleFrom3Points (pt1x,pt1y, pt2x,pt2y, pt3x,pt3y);	
  else if (!IsPerpendicular(pt1x,pt1y, pt3x,pt3y, pt2x,pt2y) )		calcCircleFrom3Points (pt1x,pt1y, pt3x,pt3y, pt2x,pt2y);	
  else if (!IsPerpendicular(pt2x,pt2y, pt1x,pt1y, pt3x,pt3y) )		calcCircleFrom3Points (pt2x,pt2y, pt1x,pt1y, pt3x,pt3y);	
  else if (!IsPerpendicular(pt2x,pt2y, pt3x,pt3y, pt1x,pt1y) )		calcCircleFrom3Points (pt2x,pt2y, pt3x,pt3y, pt1x,pt1y);	
  else if (!IsPerpendicular(pt3x,pt3y, pt2x,pt2y, pt1x,pt1y) )		calcCircleFrom3Points (pt3x,pt3y, pt2x,pt2y, pt1x,pt1y);	
  else if (!IsPerpendicular(pt3x,pt3y, pt1x,pt1y, pt2x,pt2y) )		calcCircleFrom3Points (pt3x,pt3y, pt1x,pt1y, pt2x,pt2y);	
  else { 
    return 0;
  }
  //------------------
  // constrain
  if ((m_Centerx > 0) && (m_Centerx < 1)){
     if (a < m_Centerx){
       m_Centerx = 1;
       m_Centery = 0;
       m_dRadius = 1;
     } else {
       m_Centerx = 0;
       m_Centery = 1;
       m_dRadius = 1;
     }
  }
  
  
  //------------------
  float y = 0;
  if (x >= m_Centerx){
    y = m_Centery - sqrt(sq(m_dRadius) - sq(x-m_Centerx)); 
  } 
  else{
    y = m_Centery + sqrt(sq(m_dRadius) - sq(x-m_Centerx)); 
  }
  return y;
}

//==============================================================
public boolean IsPerpendicular(
float pt1x, float pt1y,
float pt2x, float pt2y,
float pt3x, float pt3y)
{
  // Check the given point are perpendicular to x or y axis 
  float yDelta_a = pt2y - pt1y;
  float xDelta_a = pt2x - pt1x;
  float yDelta_b = pt3y - pt2y;
  float xDelta_b = pt3x - pt2x;
  float epsilon = 0.000001f;

  // checking whether the line of the two pts are vertical
  if (abs(xDelta_a) <= epsilon && abs(yDelta_b) <= epsilon){
    return false;
  }
  if (abs(yDelta_a) <= epsilon){
    return true;
  }
  else if (abs(yDelta_b) <= epsilon){
    return true;
  }
  else if (abs(xDelta_a)<= epsilon){
    return true;
  }
  else if (abs(xDelta_b)<= epsilon){
    return true;
  }
  else return false;
}


//==============================================================
public void calcCircleFrom3Points (
float pt1x, float pt1y,
float pt2x, float pt2y,
float pt3x, float pt3y)
{
  float yDelta_a = pt2y - pt1y;
  float xDelta_a = pt2x - pt1x;
  float yDelta_b = pt3y - pt2y;
  float xDelta_b = pt3x - pt2x;
  float epsilon = 0.000001f;

  if (abs(xDelta_a) <= epsilon && abs(yDelta_b) <= epsilon){
    m_Centerx = 0.5f*(pt2x + pt3x);
    m_Centery = 0.5f*(pt1y + pt2y);
    m_dRadius = sqrt(sq(m_Centerx-pt1x) + sq(m_Centery-pt1y));
    return;
  }

  // IsPerpendicular() assure that xDelta(s) are not zero
  float aSlope = yDelta_a / xDelta_a; 
  float bSlope = yDelta_b / xDelta_b;
  if (abs(aSlope-bSlope) <= epsilon){	// checking whether the given points are colinear. 	
    return;
  }

  // calc center
  m_Centerx = (aSlope*bSlope*(pt1y - pt3y) + bSlope*(pt1x + pt2x)- aSlope*(pt2x+pt3x) )/(2* (bSlope-aSlope) );
  m_Centery = -1*(m_Centerx - (pt1x+pt2x)/2)/aSlope +  (pt1y+pt2y)/2;
  m_dRadius = sqrt(sq(m_Centerx-pt1x) + sq(m_Centery-pt1y));
}


// Bezier Shapers
// adapted from BEZMATH.PS (1993)
// by Don Lancaster, SYNERGETICS Inc. 
// http://www.tinaja.com/text/bezmath.html

//------------------------------------------------------------------
public float function_QuadraticBezier (float x, float a, float b){
  functionName = "Quadratic Bezier";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float epsilon = 0.00001f;
  float min_param_a = 0.0f;
  float max_param_a = 1.0f;
  float min_param_b = 0.0f;
  float max_param_b = 1.0f;
  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 

  if (a == 0.5f){
    a += epsilon;
  }
  // solve t from x (an inverse operation)
  float om2a = 1 - 2*a;
  float t = (sqrt(a*a + om2a*x) - a)/om2a;
  float y = (1-2*b)*(t*t) + (2*b)*t;
  return y;
}


//------------------------------------------------------------------
public float function_CubicBezier (float x, float a, float b, float c, float d){


  functionName = "Cubic Bezier";
  useParameterA = true;
  useParameterB = true;
  useParameterC = true;
  useParameterD = true;
  useParameterN = false;

  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f;
  float max_param_b = 1.0f;
  float min_param_c = 0.0f + epsilon;
  float max_param_c = 1.0f - epsilon;
  float min_param_d = 0.0f;
  float max_param_d = 1.0f;
  //a = constrain(a, min_param_a, max_param_a); 
  //b = constrain(b, min_param_b, max_param_b); 
  //c = constrain(c, min_param_c, max_param_c); 
  //d = constrain(d, min_param_d, max_param_d); 

  //-------------------------------------------
  float y0a = 0.00f; // initial y
  float x0a = 0.00f; // initial x 
  float y1a = b;    // 1st influence y   
  float x1a = a;    // 1st influence x 
  float y2a = d;    // 2nd influence y
  float x2a = c;    // 2nd influence x
  float y3a = 1.00f; // final y 
  float x3a = 1.00f; // final x 

  float A =   x3a - 3*x2a + 3*x1a - x0a;
  float B = 3*x2a - 6*x1a + 3*x0a;
  float C = 3*x1a - 3*x0a;   
  float D =   x0a;

  float E =   y3a - 3*y2a + 3*y1a - y0a;    
  float F = 3*y2a - 6*y1a + 3*y0a;             
  float G = 3*y1a - 3*y0a;             
  float H =   y0a;

  // Solve for t given x (using Newton-Raphelson), then solve for y given t.
  // Assume for the first guess that t = x.
  float currentt = x;
  int nRefinementIterations = 5;
  for (int i=0; i<nRefinementIterations; i++){
    float currentx = xFromT (currentt, A,B,C,D); 
    float currentslope = slopeFromT (currentt, A,B,C);
    currentt -= (currentx - x)*(currentslope);
    currentt = constrain(currentt, 0,1);
  } 
 
  //------------
  float y = yFromT (currentt,  E,F,G,H);
  return y;
}


//==========================================================
public float slopeFromT (float t, float A, float B, float C){
  float dtdx = 1.0f/(3.0f*A*t*t + 2.0f*B*t + C); 
  return dtdx;
}
//==========================================================
public float xFromT (float t, float A, float B, float C, float D){
  float x = A*(t*t*t) + B*(t*t) + C*t + D;
  return x;
}
//==========================================================
public float yFromT (float t, float E, float F, float G, float H){
  float y = E*(t*t*t) + F*(t*t) + G*t + H;
  return y;
}

// Parabola (Quadratic) Through a Point

//------------------------------------------------------------------
public float function_ParabolaThroughAPoint (float x, float a, float b){

  functionName = "Quadratic Through a Given Point";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;
  
  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f;
  float max_param_b = 1.0f;
  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 
  
  float A = (1-b)/(1-a) - (b/a);
  float B = (A*(a*a)-b)/a;
  float y = A*(x*x) - B*(x);
  y = constrain(y, 0,1); 
  
  return y;

}





//------------------------------------------------------------------
public float function_CubicBezierThrough2Points (float x, float a, float b, float c, float d){
  functionName = "Cubic Bezier Through 2 Points";  
  useParameterA = true;
  useParameterB = true;
  useParameterC = true;
  useParameterD = true;
  useParameterN = false;

  float y = 0;

  float epsilon = 0.00001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  float min_param_b = 0.0f + epsilon;
  float max_param_b = 1.0f - epsilon;
  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b); 

  float x0 = 0;  
  float y0 = 0;
  float x4 = a;  
  float y4 = b;
  float x5 = c;  
  float y5 = d;
  float x3 = 1;  
  float y3 = 1;
  float x1,y1,x2,y2; // to be solved.

  float t1 = 0.3f;
  float t2 = 0.7f;

  float B0t1 = B0(t1);
  float B1t1 = B1(t1);
  float B2t1 = B2(t1);
  float B3t1 = B3(t1);
  float B0t2 = B0(t2);
  float B1t2 = B1(t2);
  float B2t2 = B2(t2);
  float B3t2 = B3(t2);

  float ccx = x4 - x0*B0t1 - x3*B3t1;
  float ccy = y4 - y0*B0t1 - y3*B3t1;
  float ffx = x5 - x0*B0t2 - x3*B3t2;
  float ffy = y5 - y0*B0t2 - y3*B3t2;

  x2 = (ccx - (ffx*B1t1)/B1t2) / (B2t1 - (B1t1*B2t2)/B1t2);
  y2 = (ccy - (ffy*B1t1)/B1t2) / (B2t1 - (B1t1*B2t2)/B1t2);
  x1 = (ccx - x2*B2t1) / B1t1;
  y1 = (ccy - y2*B2t1) / B1t1;

  x1 = constrain(x1, 0+epsilon,1-epsilon); 
  x2 = constrain(x2, 0+epsilon,1-epsilon); 

  y = function_CubicBezier (x, x1,y1, x2,y2);
  y = constrain(y,0,1); 
  functionName = "Cubic Bezier Nearly Through 2 Points";  
  return y;

}




//==============================================================
public float B0 (float t){
  return (1-t)*(1-t)*(1-t);
}
public float B1 (float t){
  return  3*t* (1-t)*(1-t);
}
public float B2 (float t){
  return 3*t*t* (1-t);
}
public float B3 (float t){
  return t*t*t;
}
public float  findx (float t, float x0, float x1, float x2, float x3){
  return x0*B0(t) + x1*B1(t) + x2*B2(t) + x3*B3(t);
}
public float  findy (float t, float y0, float y1, float y2, float y3){
  return y0*B0(t) + y1*B1(t) + y2*B2(t) + y3*B3(t);
}



// Double-Circle Seat

//------------------------------------------------------------------
public float function_DoubleCircleSeat (float x, float a){
  functionName = "Double-Circular Seat";
  useParameterA = true;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;
  
  float min_param_a = 0.0f;
  float max_param_a = 1.0f;
  
  a = constrain(a, min_param_a, max_param_a); 
  float y = 0;
  if (x<=a){
    y = sqrt(sq(a) - sq(x-a));
  } 
  else {
    y = 1 - sqrt(sq(1-a) - sq(x-a));
  }
  return y;
}

// Modified (Normalized) Logistic Sigmoid 

//------------------------------------------------------------------
public float function_NormalizedLogisticSigmoid (float x, float a){
  functionName = "Modified Logistic Sigmoid";
  useParameterA = true;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float epsilon = 0.0001f;
  float min_param_a = 0.0f + epsilon;
  float max_param_a = 1.0f - epsilon;
  a = constrain(a, min_param_a, max_param_a);
  a =  (1/(1-a) - 1);

  float A = 1.0f / (1.0f + exp(0 -((x-0.5f)*a*2.0f)));
  float B = 1.0f / (1.0f + exp(a));
  float C = 1.0f / (1.0f + exp(0-a)); 
  float y = (A-B)/(C-B);
  return y;
}

// A Flexible Quartic Equation

//------------------------------------------------------------------
public float function_NiftyQuartic (float x, float a, float b){
  functionName = "Quartic";
  useParameterA = true;
  useParameterB = true;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;

  float min_param_a = 0.0f;
  float max_param_a = 1.0f;
  float min_param_b = 0.0f;
  float max_param_b = 1.0f;
  a = constrain(a, min_param_a, max_param_a); 
  b = constrain(b, min_param_b, max_param_b);

  a = 1-a;
  float w = (1-2*a)*(x*x) + (2*a)*x;
  float y = (1-2*b)*(w*w) + (2*b)*w;
  return y;

}


public float function_Identity (float x){
    functionName = "Identity Function";
  useParameterA = false;
  useParameterB = false;
  useParameterC = false;
  useParameterD = false;
  useParameterN = false;
   return x;
}
static public void main(String args[]) {   PApplet.main(new String[] { "_pattern_Master" });}}